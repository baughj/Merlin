#!/bin/bash
#
# This file is part of Merlin, an EC2 API-compatible cloud
# computing frontend.
#
# Copyright (C) 2010, Justin Baugh <baughj@discordians.net>
#
# Merlin is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

# Cry for help if we encounter any errors that aren't trapped
trap errhandler 1 2 3 15 ERR

### USER DEFINED VARIABLES ###
### ERB in this template will be evaluated by Merlin, within the instance's binding.

HOSTNAME='<%= hostname %>'
MERLIN_API_ENDPOINT='https://merlin.tld'
ACCESS_TOKEN='<%= access_token %>'
INSTANCE_ID=`wget http://169.254.169.254/latest/meta-data/instance-id -q -O -`

# Default filesystem that will be used for new devices, if none is specified.
DEFAULT_FS='ext3'

# A tag that will be used for logging and configuration. The script will create
# /etc/$TAG and /var/log/$TAG.
TAG='merlin'

# The command to be used to make API requests.
FETCH='curl -k -D - -o -'

# The entry that will be added to /etc/hosts as a failsafe for Puppet resolution.
# Whatever you put here will be appended to /etc/hosts.
# In the future, this will use Augeas.
PUPPET_SERVER_HOSTS_ENTRY='1.2.3.4 puppet.tld puppet'

# We will wait a maximum of TIMEOUT seconds for puppet to finish, then we assume
# something is amiss. 
TIMEOUT=600

### Only modify below here if you know what you're doing ###

# Abort on any errors and log exactly what it is we try to do
set -e -x

if [ -d /etc/$TAG/control/userdata-complete ] || [ -d /var/log/$TAG ]; then
    echo "ERROR: Looks like this script has been run before. If you really want"
    echo "to run it again, remove /etc/$TAG/control/userdata-complete and /var/log/$TAG ."
    exit -1
fi

function errhandler {
    echo "Error encountered: bailing out!"
    set +e
    $FETCH "$MERLIN_API_ENDPOINT/api/i/$INSTANCE_ID/notify?access_token=$ACCESS_TOKEN&condition=unknownerror" 
    set -e
    exit -1
}

function completed {
    $FETCH "$MERLIN_API_ENDPOINT/api/i/$INSTANCE_ID/complete?access_token=$ACCESS_TOKEN"
    touch /etc/$TAG/control/userdata-complete
    echo "Provisioning complete!"
    # Start up puppetd for real now
    /etc/init.d/puppet start
}

function api_request {
    set +e
    # Make an API request and check the return. We do this instead of
    # using the normal wget/curl way because both won't exit with a
    # nonzero code AND save the output of a response that has a 5xx
    # status code.
    echo "API request: $1"
    $FETCH $2 > /var/log/$TAG/$1.log
    head -1 /var/log/$TAG/$1.log | grep -q 200
    if [[ "$?" != 0 ]];
    then
	echo "ERROR: API call $1 returned error. Check the logs in /var/log/$TAG."
	# Make a last ditch attempt to request help
	$FETCH "$MERLIN_API_ENDPOINT/api/i/$INSTANCE_ID/notify?access_token=$ACCESS_TOKEN&condition=apierror" 
	exit -1
    fi
    echo "API request: success"
    set -e
}

# Make our log directory / config directory
mkdir -p /etc/$TAG/control
mkdir -p /var/log/$TAG

# Save our access token to a file
echo $ACCESS_TOKEN > /etc/$TAG/merlin_access_token

# Log everything to the startup logfile
exec > /var/log/$TAG/startup.log
exec 2>&1

export DEBIAN_FRONTEND=noninteractive
apt-get update && apt-get -q -yy dist-upgrade
apt-get -q -yy install augeas-tools augeas-lenses

shadowconfig on

echo '127.0.0.1 localhost' > /etc/hosts
echo $PUPPET_SERVER_HOSTS_ENTRY >> /etc/hosts

echo "$HOSTNAME" > /etc/hostname
hostname -F /etc/hostname
/etc/init.d/rsyslog restart

# Introduce ourselves to Merlin, or notify it that we're alive
api_request hello "$MERLIN_API_ENDPOINT/api/i/$INSTANCE_ID/hello?hostname=$HOSTNAME&access_token=$ACCESS_TOKEN"

# Ask Merlin to attach any additional storage that has been provisioned
api_request attach_storage "$MERLIN_API_ENDPOINT/api/i/$INSTANCE_ID/attach_storage?access_token=$ACCESS_TOKEN"

# Allow some time for the bus to settle after devices are attached
sleep 5

echo "Processing volume configuration..."
<% for vol in volumes %>
<% vol_id = vol.volume_id.upcase.sub('-','') %>
# Really, really make sure we never run mkfs on a root device
<% if not vol.root_device %>
echo "Initializing volume <%= vol.attachment_device %>, mount point <%= vol.mount_point %>"
mkdir -p <%= vol.mount_point %>
# One F will force mkfs to make a filesystem on an entire block device; this option won't
# overwrite existing filesystems.
<% if vol.filesystem.nil? %>
<%= vol_id %>_FS=$DEFAULT_FS
<% else %>
<%= vol_id %>_FS='<%= vol.filesystem %>'
<% end %>
<% if cloud.cloud_type.paravirtualized? %>
<%= vol_id %>_DEVICE='<%= vol.attachment_device %>'
<% else %>
# This should almost assuredly work since this is KVM+Euca, and Euca doesn't
# support multiple EBS volumes; in theory, the next device added to the SCSI
# bus should always be /dev/sdb...
<%= vol_id %>_DEVICE='/dev/sdb'
<% end %>
# What partishuns wood you like to floormat?
mkfs -F -t $<%= vol_id %>_FS $<%= vol_id %>_DEVICE

# Now, make an augeas file that will update our fstab appropriately.
cat <<EOF >/etc/$TAG/fstab.augeas.<%= vol.volume_id %>
defvar fstab /files/etc/fstab
set \$fstab/01/spec $<%= vol_id %>_DEVICE
set \$fstab/01/file <%= vol.mount_point %>
set \$fstab/01/vfstype $<%= vol_id %>_FS
set \$fstab/01/opt[0] defaults
set \$fstab/01/dump 0
set \$fstab/01/passno 0
save
EOF

# Hopefully update fstab with our shiny new augeas file.
augtool < /etc/$TAG/fstab.augeas.<%= vol.volume_id %> 1>&2 2> /var/log/$TAG/augeas.log

# Lastly, mount the volume.
mount <%= vol.mount_point %>
<% else %>
echo "Not dealing with volume <%= vol.attachment_device %>, mount point <%= vol.mount_point %> - flagged as root device"
<% end %>
<% end %>

echo "Starting puppet..."

# Start puppet to get our certificate, and do initial provisioning. We use --no-daemonize
# so it won't fork off, meaning $! is actually correct
puppetd --onetime --verbose --waitforcert 5 --no-daemonize >/var/log/$TAG/puppet-initial.log 2>&1 &
PUPPET_PID=$!

echo $PUPPET_PID > /var/log/$TAG/puppet.pid

# Wait a few seconds for Puppet to request a certificate from the master
sleep 5

# Now request that our certificate is signed by the CA
api_request signcert "$MERLIN_API_ENDPOINT/api/i/$INSTANCE_ID/puppet_signcert?access_token=$ACCESS_TOKEN"

# Turn off trapping errors, so that our eval doesn't trigger error handling
trap - ERR
count=0

while ((count < TIMEOUT )); do
    if [ ! -d "/proc/$PUPPET_PID" ]; then
	completed
	exit 0
    fi
    count=$(( count +1 ))
    sleep 1
done

# If we get here, puppet should still be running...let's verify that just to be sure
if [ -z "$(pgrep puppetd)" ]
then
    completed
    exit 0
else
    $FETCH "$MERLIN_API_ENDPOINT/api/i/$INSTANCE_ID/notify?access_token=$ACCESS_TOKEN&condition=puppetlongrunning" 
    echo "Puppet process not completed? Alerting."
    exit -1
fi
