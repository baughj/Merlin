#!/bin/bash
#
# This file is part of Merlin, an EC2 API-compatible cloud
# computing frontend.
#
# Copyright (C) 2010, Justin Baugh <baughj@discordians.net>
#
# Merlin is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

HOSTNAME='<%= hostname %>'
MERLIN_API_ENDPOINT='https://merlin.tld/'
ACCESS_TOKEN='<%= access_token %>'
INSTANCE_ID='<%= instance_id %>'

# Default filesystem that will be used for new devices, if none is specified.
DEFAULT_FS='ext3'

# A tag that will be used for logging and configuration. The script will create
# /etc/$TAG and /var/log/$TAG.

TAG='tld'

if [ -d /etc/$TAG] || [ -d /var/log/$TAG ]; then
    echo "ERROR: Looks like this script has been run before. If you really want"
    echo "to run it again, remove /etc/$TAG and /var/log/$TAG ."
    exit -1
fi

set -e -x
mkdir -p /var/log/$TAG
exec > /var/log/$TAG/startup.log
exec 2>&1

# First, a sanity check...
REPORTED_ID=`wget http://169.254.169.254/latest/meta-data/instance-id -q -O -`

if [ "$INSTANCE_ID" != "$REPORTED_ID" ]; then
    wget "$MERLIN_API_ENDPOINT/api/i/$ID/intervene&access_token=$ACCESS_TOKEN&condition=idmismatch" 
    echo "ERROR: My instance ID should be $INSTANCE_ID but is reported as $REPORTED_ID...?"
    exit -1
fi

export DEBIAN_FRONTEND=noninteractive
apt-get install augeas-tools augeas-lenses

shadowconfig on
echo '127.0.0.1 localhost' > /etc/hosts
echo '1.2.3.4 puppet.tld puppet' >> /etc/hosts

echo $HOSTNAME > /etc/hostname
hostname -F /etc/hostname

# Introduce ourselves to Merlin, or notify it that we're alive
wget "$MERLIN_API_ENDPOINT/api/i/$ID/hello?hostname=$HOSTNAME&access_token=$ACCESS_TOKEN" -O /var/log/$TAG/hello.log

# Ask Merlin to attach any additional storage that has been provisioned
wget "$MERLIN_API_ENDPOINT/api/i/$ID/attach_storage&access_token=$ACCESS_TOKEN" -O /var/log/$TAG/attachstorage.log

echo "Processing volume configuration..."
<% for vol in volumes %>
<% vol_id = vol.volume_id.upcase.sub('-','') %>
# Really, really make sure we never run mkfs on a root device
<% if not vol.root_device %>
echo "Initializing volume <%= vol.attachment_device %>, mount point <%= vol.mount_point %>"
mkdir -p <%= vol.mount_point %>
# One F will force mkfs to make a filesystem on an entire block device; this option won't
# overwrite existing filesystems.
<% if vol.filesystem.nil? %>
<%= vol_id %>_FS=$DEFAULT_FS
<% else %>
<%= vol_id %>_FS='<%= vol.filesystem %>'
<% end %>
<% if cloud.cloud_type.paravirtualized? %>
<%= vol_id %>_DEVICE='<%= vol.attachment_device %>'
<% else %>
# This should almost assuredly work since this is KVM+Euca, and Euca doesn't
# support multiple EBS volumes; in theory, the next device added to the SCSI
# bus should always be /dev/sdb...
<%= vol_id %>_DEVICE='/dev/sdb'
<% end %>
# What partishuns wood you like to floormat?
mkfs -F -t $<%= vol_id %>_FS $<%= vol_id %>_DEVICE

# Now, make an augeas file that will update our fstab appropriately.
cat <<EOF /etc/$TAG/fstab.augeas.<%= vol.volume_id %>
defvar fstab /files/etc/fstab
set $fstab/01/spec $<%= vol_id %>_DEVICE
set $fstab/01/file <%= vol.mount_point %>
set $fstab/01/vfstype $<%= vol_id %>_FS
set $fstab/01/opt[0] defaults
set $fstab/01/dump 0
set $fstab/01/passno 0
save
EOF

# Hopefully update fstab with our shiny new augeas file.
augtool < /etc/$TAG/fstab.augeas.<%= vol.volume_id %> 1>&2 2> /var/log/$TAG/augeas.log
<% else %>
echo "Not dealing with volume <%= vol.attachment_device %>, mount point <%= vol.mount_point %> - flagged as root device"
<% end %>
<% end %>

echo "Starting puppet..."
puppetd --onetime --verbose --waitforcert 5 &
PUPPET_PID=$!
echo $PUPPET_PID > /var/log/$TAG/puppet.pid
sleep 5

wget "$MERLIN_API_ENDPOINT/api/i/$ID/puppet_signcert&access_token=$ACCESS_TOKEN" -O /var/log/$TAG/signkey.log

# We will wait a maximum of ten minutes for puppet to finish, then we assume
# something is amiss

TIMEOUT=600
count=0

while ((count < TIMEOUT )); do
    eval '[ ! -d "proc/$PUPPET_PID" ] && ((count = TIMEOUT))'
    ((count++))
    sleep 1
done

if [ -d "proc/$PUPPET_PID" ];
then
    wget "$MERLIN_API_ENDPOINT/api/i/$ID/intervene&access_token=$ACCESS_TOKEN&condition=puppetlongrunning" 
else
    wget "$MERLIN_API_ENDPOINT/api/i/$ID/complete&access_token=$ACCESS_TOKEN"
fi

echo "Provisioning complete!"

# Start up puppetd for real now

/etc/init.d/puppet start
